Certainly! Below is an implementation of a module named `TopModule` that behaves as a Moore state machine according to the specified state transitions. 

This code is written in Verilog:

```verilog
module TopModule (
    input wire clk,
    input wire areset,
    input wire in,
    output reg out
);

    // Define state encoding
    typedef enum reg [1:0] {
        A = 2'b00,  // State A
        B = 2'b01   // State B
    } state_t;

    // State variables
    state_t current_state, next_state;

    // Asynchronous reset
    always @(posedge clk or posedge areset) begin
        if (areset) begin
            current_state <= B; // Reset to state B
            out <= 1'b1;        // Output for state B
        end else begin
            current_state <= next_state; // Update current state
            out <= (next_state == A) ? 1'b0 : 1'b1; // Update output based on next state
        end
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            A: begin
                if (in == 0) begin
                    next_state = B; // A --0--> B
                end else begin
                    next_state = A; // A --1--> A
                end
            end
            B: begin
                if (in == 0) begin
                    next_state = A; // B --0--> A
                end else begin
                    next_state = B; // B --1--> B
                end
            end
            default: begin
                next_state = B; // Default to state B
            end
        endcase
    end

endmodule
```

### Explanation:
1. **State Encoding**: The states A and B are encoded using a two-bit enumeration (`state_t` type).
2. **Asynchronous Reset**: The machine asynchronously resets to state B (`current_state <= B`) whenever `areset` is high. The output is set to `1` since thatâ€™s the output for state B.
3. **State Transition Logic**: The `always @(*)` block defines how the next state is determined based on the current state and input:
   - In state A:
     - If `in` is `0`, move to state B.
     - If `in` is `1`, remain in state A.
   - In state B:
     - If `in` is `0`, move to state A.
     - If `in` is `1`, remain in state B.
4. **Output Logic**: The output `out` is updated based on the next state whenever there is a change in state. State A produces `0`, and state B produces `1`.

Make sure to simulate and test the design under various scenarios to ensure it operates as intended!