Sure! Below is the Verilog code for a `TopModule` that implements the finite state machine (FSM) for the Lemmings game according to your specifications. The state machine will have two states: `WALK_LEFT` and `WALK_RIGHT`. We'll use a Moore machine architecture, where the outputs depend only on the states.

### Verilog Code

```verilog
module TopModule (
    input  clk,
    input  areset,
    input  bump_left,
    input  bump_right,
    output reg walk_left,
    output reg walk_right
);

    // Declare state encoding
    typedef enum reg [1:0] {
        WALK_LEFT   = 2'b00,
        WALK_RIGHT  = 2'b01
    } state_t;

    // State and next state variables
    state_t current_state, next_state;

    // State register (Sequential logic)
    always @(posedge clk or posedge areset) begin
        if (areset)
            current_state <= WALK_LEFT; // Reset to WALK_LEFT state
        else
            current_state <= next_state; // Update to next state
    end

    // Next state logic (Combinational logic)
    always @(*) begin
        // Default case to hold the current state
        next_state = current_state;
        walk_left = 0;
        walk_right = 0;

        case (current_state)
            WALK_LEFT: begin
                // If bumped left, go right
                if (bump_right) begin
                    next_state = WALK_LEFT; // Remain in WALK_LEFT unless bumped
                end
                if (bump_left) begin
                    next_state = WALK_RIGHT; // Switch to WALK_RIGHT
                end
                walk_left = 1; // Output for WALK_LEFT state
            end

            WALK_RIGHT: begin
                // If bumped right, go left
                if (bump_left) begin
                    next_state = WALK_RIGHT; // Remain in WALK_RIGHT unless bumped
                end
                if (bump_right) begin
                    next_state = WALK_LEFT; // Switch to WALK_LEFT
                end
                walk_right = 1; // Output for WALK_RIGHT state
            end

            default: begin
                next_state = WALK_LEFT; // Default state
                walk_left = 1; // Default output
            end
        endcase
    end

endmodule
```

### Explanation:

1. **State Definition**: We define two states using an enumerated type (`typedef enum reg [1:0]`), representing `WALK_LEFT` and `WALK_RIGHT`.

2. **State Register**: The state register is updated on the positive edge of the clock or asynchronously reset by `areset`. When `areset` is high, the state resets to `WALK_LEFT`.

3. **Next State Logic**:
   - The next state is determined based on the current state and the input signals `bump_left` and `bump_right`.
   - In the `WALK_LEFT` state: If `bump_left` is received, the state changes to `WALK_RIGHT`. If `bump_right` is active, it will remain in `WALK_LEFT`.
   - In the `WALK_RIGHT` state: If `bump_right` is received, it changes to `WALK_LEFT`, and if `bump_left` is active, it stays in `WALK_RIGHT`.

4. **Output Logic**: The output is set according to the current state. In `WALK_LEFT`, the output `walk_left` is asserted, and in `WALK_RIGHT`, the output `walk_right` is asserted. 

This structure ensures that the state transitions are controlled by the bump inputs, and the output behavior reflects the current direction the Lemming is walking based on its state.