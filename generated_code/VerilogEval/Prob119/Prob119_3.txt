To implement the specified Moore state machine in Verilog, we will define a module named `TopModule`. This module will include an asynchronous reset, a clock input, an input signal, and an output signal as described. The state machine will have four states (A, B, C, D) and will produce outputs based on the current state, following the provided state transition table. 

Here is the implementation:

```verilog
module TopModule (
    input clk,
    input areset, // Asynchronous reset
    input in,
    output reg out
);

    // State encoding
    typedef enum reg [1:0] {
        A = 2'b00,
        B = 2'b01,
        C = 2'b10,
        D = 2'b11
    } state_t;

    // Current state and next state variables
    state_t current_state, next_state;

    // Sequential logic: state transition on clock edge
    always @(posedge clk or posedge areset) begin
        if (areset) begin
            current_state <= A; // Reset to state A
        end else begin
            current_state <= next_state; // Update current state
        end
    end

    // Combinational logic: next state and output logic
    always @(*) begin
        // Default assignments for next state and output
        out = 0; // Default output (Moore state machine behavior)
        next_state = current_state; // Default next state (stay in current state)
        
        case (current_state)
            A: begin
                if (in) begin
                    next_state = B; // from A to B if in = 1
                end
            end
            B: begin
                if (in) begin
                    next_state = B; // remains in B if in = 1
                end else begin
                    next_state = C; // from B to C if in = 0
                end
            end
            C: begin
                if (in) begin
                    next_state = D; // from C to D if in = 1
                end else begin
                    next_state = A; // from C to A if in = 0
                end
            end
            D: begin
                if (in) begin
                    next_state = B; // from D to B if in = 1
                end else begin
                    next_state = C; // from D to C if in = 0
                end
                out = 1; // output = 1 when in state D
            end
        endcase
    end

endmodule
```

### Key Points:
1. **State Encoding**: We use a 2-bit enum for state encoding (00 for A, 01 for B, 10 for C, 11 for D).
  
2. **Asynchronous Reset**: The state machine resets to state A on a high `areset` signal, which happens immediately regardless of other signals.

3. **Sequential Logic**: On each positive edge of the clock, the current state is updated to the next state.

4. **Combational Logic**: The next state and output are determined based on the current state and the input signal. Since it is a Moore machine, outputs depend only on the current state.

5. **Output Logic**: The output is set in state D, as specified in the state transition table. In all other states, it defaults to 0. 

This implementation adheres to the specified requirements, ensuring the state transitions and output generation work as stated.