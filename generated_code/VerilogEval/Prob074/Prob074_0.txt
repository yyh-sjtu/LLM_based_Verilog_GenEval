Here's an implementation of the `TopModule` with a finite state machine as per your requirements. The module includes the necessary D flip-flops, along with the XOR, AND, and OR gates, and outputs the result through a three-input XNOR gate.

```verilog
module TopModule (
    input  clk,
    input  x,
    output z
);
    // Internal signals for flip-flop outputs
    reg ff_xor_out;
    reg ff_and_out;
    reg ff_or_out;

    // Flip-Flop behavior on the positive edge of clk
    always @(posedge clk) begin
        ff_xor_out <= x ^ ff_xor_out; // XOR gate with DFF output
        ff_and_out <= x & ~ff_and_out; // AND gate with DFF complemented output
        ff_or_out <= x | ~ff_or_out; // OR gate with DFF complemented output
    end
    
    // Three-input XNOR gate
    assign z = ~(ff_xor_out ^ ff_and_out ^ ff_or_out);

endmodule
```

### Explanation:
1. **Inputs and Outputs**:
   - `clk`: Clock input.
   - `x`: Input bit.
   - `z`: Output bit.

2. **D Flip-Flops**:
   - Three D flip-flops are implemented by registering the outputs of the logic gates on the rising edge of the clock.

3. **Gates**:
   - The output of each flip-flop feeds into its corresponding gate:
     - The output of the flip-flop connected to the XOR gate is updated by XORing `x` with the current output of that flip-flop.
     - The output of the flip-flop connected to the AND gate is updated by ANDing `x` with the complemented output of that flip-flop.
     - The output of the flip-flop connected to the OR gate is updated by ORing `x` with the complemented output of that flip-flop.

4. **XNOR Output**:
   - The final output `z` is computed by an XNOR operation on the outputs of the three D flip-flops.

Make sure to synthesize and simulate this design according to your environment to verify its function under different input conditions.