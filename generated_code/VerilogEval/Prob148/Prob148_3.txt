To implement the TopModule as specified, we will create a finite state machine (FSM) that transitions between states based on the input signals and generates output grant signals. Below is the Verilog code for the TopModule, which adheres to your requirements.

```verilog
module TopModule (
    input wire clk,
    input wire resetn,
    input wire [2:0] r,
    output reg [2:0] g
);

    // State encoding
    typedef enum reg [1:0] {
        S_A = 2'b00, // State A
        S_B = 2'b01, // State B
        S_C = 2'b10  // State C
    } state_t;

    // State and next state variables
    state_t current_state, next_state;

    // FSM next state logic
    always @(*) begin
        case (current_state)
            S_A: begin
                if (r[0])
                    next_state = S_B; // Grant to device 0
                else if (r[1])
                    next_state = S_C; // Grant to device 1
                else
                    next_state = S_A; // Stay in state A
            end
            
            S_B: begin
                if (r[0]) 
                    next_state = S_B; // Stay in state B
                else
                    next_state = S_A; // Go back to state A
            end
            
            S_C: begin
                if (r[1]) 
                    next_state = S_C; // Stay in state C
                else
                    next_state = S_A; // Go back to state A
            end
        
            default: next_state = S_A; // Default to state A
        endcase
    end

    // FSM state flip-flops
    always @(posedge clk or negedge resetn) begin
        if (!resetn) begin
            current_state <= S_A; // Reset to state A
        end else begin
            current_state <= next_state;
        end
    end

    // Output logic for grant signals
    always @(*) begin
        // Default to no grants
        g = 3'b000; 
        case (current_state)
            S_B: g[0] = 1'b1; // Grant to device 0
            S_C: g[1] = 1'b1; // Grant to device 1
            // In state A, no grants are active
            default: g = 3'b000;
        endcase
    end

endmodule
```

### Explanation of the Code:
1. **State Definitions**: We define three states using a `typedef enum reg` construct: `S_A`, `S_B`, and `S_C` to represent the states of the FSM.
  
2. **Next State Logic**: 
   - The FSM logic checks the current state and inputs to determine the next state.
   - In state A, it transitions to B if `r[0]` is high, C if `r[1]` is high, or stays in A if both are low. 
   - In state B, it remains in B if `r[0]` is high; otherwise, it returns to A. 
   - In state C, it stays in C if `r[1]` is high and moves back to A otherwise.

3. **State Flip-Flops**: This block captures the state transitions on the rising edge of `clk`, resetting to state A when `resetn` is low.

4. **Output Logic**: This block sets the grant outputs based on the current state. The output `g` is set based on which state the FSM is in: only state B sets `g[0]`, and state C sets `g[1]`.

In this implementation, the FSM behaves according to the specifications you provided, and each port operates as a single bit, as required.