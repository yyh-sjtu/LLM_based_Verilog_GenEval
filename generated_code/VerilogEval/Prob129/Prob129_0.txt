```verilog
module TopModule (
    input clk,
    input aresetn,
    input x,
    output reg z
);

// Enum for state encoding
typedef enum logic [1:0] {
    S0, // Initial state
    S1, // 1st bit of sequence detected
    S2  // Full sequence detected
} state_type;

// State and next state variables
state_type state, next_state;

// State register
always @(posedge clk or negedge aresetn) begin
    if (~aresetn) begin
        state <= S0;
    end else begin
        state <= next_state;
    end
end

// Next state logic and output generation
always @* begin
    case (state)
        S0: begin
            if (x) begin
                next_state = S1;
            end else begin
                next_state = S0;
            end
            z = 0;
        end
        S1: begin
            if (x) begin
                next_state = S2;
            end else begin
                next_state = S1;
            end
            z = 0;
        end
        S2: begin
            next_state = S0;
            z = 1;
        end
        default: begin
            next_state = S0;
            z = 0;
        end
    endcase
end

endmodule
```