Certainly! Below is a Verilog implementation of a top module that describes a Mealy finite state machine (FSM) designed to recognize the sequence "101" on the input signal `x`. This FSM has a 3-state representation and fulfills the specified requirements, including the asynchronous reset and overlapping sequence recognition.

```verilog
module TopModule (
    input clk,
    input aresetn,
    input x,
    output reg z
);

// State encoding
typedef enum reg [1:0] {
    S0 = 2'b00, // Initial state
    S1 = 2'b01, // State after receiving '1'
    S2 = 2'b10  // State after receiving '10'
} state_t;

state_t current_state, next_state;

// Sequential logic for state transition
always @(posedge clk or negedge aresetn) begin
    if (!aresetn) begin
        current_state <= S0;  // Reset state to S0
        z <= 1'b0;            // Reset output
    end else begin
        current_state <= next_state;
    end
end

// Combinational logic for next state and output
always @(*) begin
    // Default values
    next_state = current_state;
    z = 1'b0;

    case (current_state)
        S0: begin
            if (x) begin
                next_state = S1;  // Transition to S1 on '1'
            end
        end
        
        S1: begin
            if (!x) begin
                next_state = S2;  // Transition to S2 on '0'
            end else begin
                // Stay in S1 on '1'
            end
        end

        S2: begin
            if (x) begin
                z = 1'b1;         // Output '1' on detection of '101'
                next_state = S1;  // Transition back to S1 on '1'
            end else begin
                next_state = S0;  // Transition back to S0 on '0'
            end
        end

        default: begin
            next_state = S0; // Default to reset state
        end
    endcase
end

endmodule
```

### Explanation of the Code:

1. **State Encoding**: 
   - The FSM has three states: `S0` (waiting for first '1'), `S1` (after seeing '1'), and `S2` (after seeing '10').

2. **Sequential Logic**:
   - The current state is updated at the positive edge of the clock or reset asynchronously with `aresetn`.
   - If `aresetn` is low, it will reset the state to `S0` and set the output `z` to `0`.

3. **Combinational Logic**:
   - The next state and output `z` are determined based on the current state and the input `x`.
   - The module starts from `S0` and transitions through the states based on the input sequence "101".
   - Signal `z` is asserted when the input sequence "101" is completed.

This setup allows the FSM to recognize overlapping sequences correctly and maintains the requested design structure.