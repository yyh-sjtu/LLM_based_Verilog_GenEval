module adv_fsm(
    input clk,
    input reset,
    input x,
    output reg z
); 

parameter IDLE = 2'b00;
parameter S1 = 2'b01;
parameter S10 = 2'b10;
parameter S101 = 2'b11;

reg [1:0] present_state, next_state;

always @ (posedge clk or posedge reset) begin
    if (reset) begin
        present_state <= IDLE;
        z <= 0;
    end
    else begin
        present_state <= next_state;
        case(present_state)
            IDLE: begin
                if (x)
                    next_state = S1;
                else
                    next_state = IDLE;
                
                z <= 0;
            end
            S1: begin
                if (!x)
                    next_state = S10;
                else
                    next_state = IDLE;
                
                z <= 0;
            end
            S10: begin
                if (x)
                    next_state = S101;
                else
                    next_state = IDLE;
                
                z <= 0;
            end
            S101: begin
                next_state = IDLE;
                z <= 1;
            end
        endcase
    end
end

endmodule