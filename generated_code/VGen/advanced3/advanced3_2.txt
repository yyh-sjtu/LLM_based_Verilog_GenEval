module adv_fsm(
    input clk,
    input reset,
    input x,
    output reg z
    );
    
    // Define states
    parameter IDLE=0, S1=1, S10=2, S101=3;
    
    // Registers for state transition
    reg [1:0] present_state, next_state;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            present_state <= IDLE;
        end
        else begin
            present_state <= next_state;
        end
    end
    
    always @* begin
        case (present_state)
            IDLE: begin
                if (x == 1)
                    next_state = S1;
                else
                    next_state = IDLE;
            end
            S1: begin
                if (x == 0)
                    next_state = S10;
                else
                    next_state = IDLE;
            end
            S10: begin
                if (x == 1)
                    next_state = S101;
                else
                    next_state = IDLE;
            end
            S101: begin
                next_state = IDLE;
            end
        endcase
    end
    
    assign z = (present_state == S101) ? 1'b1 : 1'b0;
    
endmodule