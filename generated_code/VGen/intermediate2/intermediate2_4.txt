Here is the verilog code for a 16-bit full adder module:

```verilog
module full_adder(
    input wire a,
    input wire b,
    input wire cin,
    output wire sum,
    output wire cout
);
    
    assign {cout, sum} = a + b + cin;
    
endmodule
```

And here is the verilog code for the counter module that counts from 1 to 12:

```verilog
module counter(
    input wire clk,
    input wire reset,
    output reg [3:0] q
);

reg [15:0] count;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        count <= 4'b0000;
        q <= count[3:0];
    end else begin
        count <= count + 1;
        q <= count[3:0];
    end
end

endmodule
```

This counter module uses a 16-bit counter to count from 1 to 12, and the output q is the lower 4 bits of the counter value. The counter is incremented on each positive edge of the clock signal and is reset to 0 when the reset signal is high.