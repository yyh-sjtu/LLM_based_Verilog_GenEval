
assign feedback_value = r_reg[4] ^ r_reg[2] ^ r_reg[0]; // Calculate the feedback value based on taps
always @(posedge clk or posedge reset) begin
    if (reset) begin
        r_reg <= 5'b1; // Initialize the LFSR with a non-zero value
    end else begin
        r_reg <= r_next; // Update the register with the next state value
    end
end

assign r_next = {feedback_value, r_reg[4:1]}; // Shift the register and insert the feedback value at LSB

assign q = r_reg; // Output the current state of the LFSR

endmodule

//Instance of lfsr module
module test_lfsr;
reg clk;
reg reset;
wire [4:0] q;

initial begin
    clk = 0;
    reset = 1;
    #10 reset = 0;
    #50 $finish; // End simulation after 50 time units
end

always begin
    #5 clk = ~clk; // Toggle clock every 5 time units
end

lfsr uut (
    .clk(clk),
    .reset(reset),
    .q(q)
);

endmodule