```verilog
module signed_adder(
    input [7:0] a,
    input [7:0] b,
    output reg [7:0] s,
    output reg overflow
);

always @(*) begin
    s = a + b;
    if((a[7] == 1 && b[7] == 1 && s[7] == 0) || (a[7] == 0 && b[7] == 0 && s[7] == 1)) begin
        overflow = 1;
    end else begin
        overflow = 0;
    end
end

endmodule
```

In this Verilog code, we have implemented a signed adder module that adds two 8-bit 2's complement numbers 'a' and 'b'. The sum is stored in output s, and the overflow flag is captured in the output overflow. The overflow flag is set to 1 if the result of addition causes overflow, otherwise it is set to 0.