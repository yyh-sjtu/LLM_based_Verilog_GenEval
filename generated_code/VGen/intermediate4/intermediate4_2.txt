    
    // State register
    always @ (posedge clk or posedge reset)
    begin
        if (reset)
            present_state <= 0;
        else
            present_state <= next_state;
    end
    
    // Next state logic
    always @ (*)
    begin
        case (present_state)
            0: begin
                   if (in)
                       next_state = 1;
                   else
                       next_state = 0;
               end
            1: begin
                   if (in)
                       next_state = 0;
                   else
                       next_state = 1;
               end
        endcase
    end
    
    // Output logic
    assign out = (present_state == 0) ? 1 : 0;
    
endmodule