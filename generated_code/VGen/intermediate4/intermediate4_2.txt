 // Define the states
parameter STATE_0 = 0;
parameter STATE_1 = 1;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        present_state <= STATE_0;
    end else begin
        present_state <= next_state;
    end
end

always @* begin
    case (present_state)
        STATE_0: begin
            if (in) begin
                next_state = STATE_1;
            end else begin
                next_state = STATE_0;
            end
        end
        STATE_1: begin
            if (!in) begin
                next_state = STATE_0;
            end else begin
                next_state = STATE_1;
            end
        end
        default: begin
            next_state = STATE_0;
        end
    endcase
end

assign out = (present_state == STATE_0) ? 1'b1 : 1'b0;

endmodule

This verilog code implements a simple Moore state machine with two states (0 and 1), one input 'in', and one output 'out'. The reset state is set to 0, and the output is high when the machine is in state 0. The state changes based on the input 'in'. If 'in' is low, the state changes from 0 to 1, and vice versa.