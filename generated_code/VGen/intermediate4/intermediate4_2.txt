// Define states
parameter S0 = 0;
parameter S1 = 1;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        present_state <= S0;
    end else begin
        present_state <= next_state;
    end
end

always @* begin
    // Implement state transitions
    case(present_state)
        S0: begin
            if(in == 1'b0) begin
                next_state = S1;
            end else begin
                next_state = S0;
            end
        end
        S1: begin
            if(in == 1'b0) begin
                next_state = S0;
            end else begin
                next_state = S1;
            end
        end
    endcase
end

assign out = (present_state == S0) ? 1'b1 : 1'b0;

endmodule