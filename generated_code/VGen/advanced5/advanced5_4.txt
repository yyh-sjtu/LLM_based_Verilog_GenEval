// Define state register and initial state
reg [1:0] state_reg, next_state;
parameter IDLE = 2'b00, SA = 2'b01, SB = 2'b10, SAB = 2'b11;
assign z = (state_reg == SAB) ? 1'b1 : 1'b0;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        state_reg <= IDLE;
    end else begin
        state_reg <= next_state;
    end
end

always @* begin
    case(state_reg)
        IDLE: begin
            if (a & b) begin
                next_state = SAB;
            end else if (a) begin
                next_state = SA;
            end else if (b) begin
                next_state = SB;
            end else begin
                next_state = IDLE;
            end
        end
        SA: begin
            if (a & b) begin
                next_state = SAB;
            end else if (!a) begin
                next_state = IDLE;
            end else begin
                next_state = SA;
            end
        end
        SB: begin
            if (a & b) begin
                next_state = SAB;
            end else if (!b) begin
                next_state = IDLE;
            end else begin
                next_state = SB;
            end
        end
        SAB: begin
            if (!a | !b) begin
                next_state = IDLE;
            end else begin
                next_state = SAB;
            end
        end
    endcase
end

endmodule