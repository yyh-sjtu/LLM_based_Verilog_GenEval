// Define the state machine transitions
always @(posedge clk or posedge reset) begin
  if (reset) begin
    cur_state <= IDLE;
  end else begin
    cur_state <= next_state;
  end
end

// Define the state machine logic
always @* begin
  case (cur_state)
    IDLE: begin
      if (a == 1 && b == 1) begin
        next_state = SAB;
      end else if (a == 1) begin
        next_state = SA;
      end else if (b == 1) begin
        next_state = SB;
      end else begin
        next_state = IDLE;
      end
    end
    
    SA: begin
      if (b == 1) begin
        next_state = SAB;
      end else begin
        next_state = SA;
      end
    end
    
    SB: begin
      if (a == 1) begin
        next_state = SAB;
      end else begin
        next_state = SB;
      end
    end
    
    SAB: begin
      next_state = SAB;
    end
  endcase
end

// Output
assign z = (cur_state == SAB);

endmodule