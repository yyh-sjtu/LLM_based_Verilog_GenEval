// State machine logic
always @(posedge clk or posedge reset) begin
    if (reset) begin
        cur_state <= IDLE;
    end else begin
        cur_state <= next_state;
    end
end

// Output logic
assign z = (cur_state == SAB);

// State transition logic
always @* begin
    case (cur_state)
        IDLE: begin
            if (a && !b) begin
                next_state = SA;
            end else if (!a && b) begin
                next_state = SB;
            end else if (a && b) begin
                next_state = SAB;
            end else begin
                next_state = IDLE;
            end
        end
        SA: begin
            if (a && b) begin
                next_state = SAB;
            end else if (!a && b) begin
                next_state = SB;
            end else begin
                next_state = IDLE;
            end
        end
        SB: begin
            if (a && b) begin
                next_state = SAB;
            end else if (a && !b) begin
                next_state = SA;
            end else begin
                next_state = IDLE;
            end
        end
        SAB: begin
            next_state = IDLE;
        end
    endcase
end

endmodule