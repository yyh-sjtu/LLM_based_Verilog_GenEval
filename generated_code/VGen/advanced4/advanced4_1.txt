Here is the implementation of the 64-bit arithmetic shift register with synchronous load in Verilog:

```verilog
module advshift(
    input clk,
    input load,
    input ena,
    input [1:0] amount,
    input [63:0] data,
    output reg [63:0] q
);

always @(posedge clk) begin
    if (load) begin
        q <= data;
    end else if (ena) begin
        case(amount)
            2'b00: q <= {q[62:0], q[63]}; // Shift left by 1 bit
            2'b01: q <= {q[55:0], {8{1'b0}}, q[63:56]}; // Shift left by 8 bits
            2'b10: q <= {q[0], q[63:1]}; // Shift right by 1 bit
            2'b11: q <= {q[7:0], q[63:8]}; // Shift right by 8 bits
        endcase
    end
end

endmodule
```

This module includes a synchronous process that executes on the positive edge of the clock signal. If the load input is high, the data input is loaded into the output register `q`. If the enable input is high, the shift operation is performed based on the value of the `amount` input. The shift operations are carried out based on the defined shift amounts for left and right shifts by 1 or 8 bits.

Please let me know if you need any further assistance or modifications.