Here is the implementation of the RAM module in Verilog:

```verilog
module ram #( parameter ADDR_WIDTH=6, parameter DATA_WIDTH=8) (
  input [DATA_WIDTH-1:0] data,
  input [ADDR_WIDTH-1:0] addr,
  input we,
  input clk,
  output reg [DATA_WIDTH-1:0] q
);

  reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];

  always @(posedge clk) begin
    if (we) begin
      ram[addr] <= data;
    end
    q <= ram[addr];
  end

endmodule
```

This RAM module takes in data and address inputs, as well as a write enable signal and clock. It has an output q which reads the data stored in the RAM at the given address. The RAM is implemented as an array of registers, with each register storing DATA_WIDTH bits of data. The data is written to the RAM when the write enable signal we is high.