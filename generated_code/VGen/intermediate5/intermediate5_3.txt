Sure, here is the implementation of the left rotate module in Verilog:

```verilog
module left_rotate(
    input clk,
    input reset,
    input [2:0] amount,
    input [7:0] data,
    input load,
    output reg [7:0] out
);

reg [7:0] shift_reg;

always @(posedge clk or posedge reset) begin
    if (reset)
        shift_reg <= 8'b0;
    else if (load)
        shift_reg <= data;
    else begin
        shift_reg <= {shift_reg[7-amount:0], shift_reg[7:8-amount]};
    end
end

assign out = shift_reg;

endmodule
```

This Verilog module takes an 8-bit input data and rotates it to the left by the specified amount (from 0 to 7) whenever the load signal is high. The output is stored in the `out` register and updated on every clock cycle. The `reset` signal resets the shift register to 0 when active.

Please let me know if you need any further assistance or modifications.