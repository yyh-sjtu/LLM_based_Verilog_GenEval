// Declare internal signals
reg [7:0] temp;

always @ (posedge clk or negedge reset) begin
    if (reset == 0) begin // Reset condition
        temp <= 0;
    end else begin
        if (load) begin // Load data into temp
            temp <= data;
        end else begin // Perform shift left and rotate operation
            temp <= {temp[6:0], temp[7]};
        end
        
        // Perform rotate operation based on amount
        case (amount)
            3'b000: out = temp; // No rotation
            3'b001: out = {temp[6:0], temp[7]}; // Rotate left by 1 bit
            3'b010: out = {temp[5:0], temp[7:6]}; // Rotate left by 2 bits
            3'b011: out = {temp[4:0], temp[7:5]}; // Rotate left by 3 bits
            3'b100: out = {temp[3:0], temp[7:4]}; // Rotate left by 4 bits
            3'b101: out = {temp[2:0], temp[7:3]}; // Rotate left by 5 bits
            3'b110: out = {temp[1:0], temp[7:2]}; // Rotate left by 6 bits
            3'b111: out = {temp[0], temp[7:1]}; // Rotate left by 7 bits
            default: out = temp; // No rotation
        endcase
    end
end

endmodule