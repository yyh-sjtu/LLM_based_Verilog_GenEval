```verilog
module pulse_detect (
    input clk,
    input rst_n,
    input data_in,
    output reg data_out
);

// State declaration
reg [1:0] state;

// State definition
parameter IDLE = 2'b00;
parameter STATE_1 = 2'b01;
parameter STATE_2 = 2'b10;

// Initial state assignment
initial begin
    state = IDLE;
    data_out = 0;
end

// State machine
always @ (posedge clk or negedge rst_n)
begin
    if (~rst_n) begin
        state <= IDLE;
        data_out <= 0;
    end
    else begin
        case (state)
            IDLE:
                if (data_in) begin
                    state <= STATE_1;
                    data_out <= 0;
                end
            STATE_1:
                if (!data_in) begin
                    state <= STATE_2;
                    data_out <= 0;
                end
            STATE_2:
                if (data_in) begin
                    state <= IDLE;
                    data_out <= 1;
                end
        endcase
    end
end

endmodule
```
In this implementation, the pulse_detect module detects the presence of a pulse in the input signal data_in and generates an output signal data_out to indicate the end of the pulse. The state machine transitions through three states to detect the rising and falling edges of the pulse as specified.