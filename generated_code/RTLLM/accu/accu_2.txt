```verilog
module accu (
    input clk,
    input rst_n,
    input [7:0] data_in,
    input valid_in,
    output reg valid_out,
    output reg [9:0] data_out
);

reg [7:0] acc_data [3:0];
reg [3:0] count;

always @(posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        valid_out <= 0;
        data_out <= 10'b0;
        count <= 4'b0;
        acc_data <= {8{8'b0}};
    end else begin
        if (valid_in) begin
            count <= count + 1;
            acc_data[count] <= data_in;
            if (count == 3) begin
                data_out <= acc_data[0] + acc_data[1] + acc_data[2] + acc_data[3];
                valid_out <= 1;
            end else begin
                data_out <= 10'b0;
                valid_out <= 0;
            end
        end
    end
end

endmodule
```