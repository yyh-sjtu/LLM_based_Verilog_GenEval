```verilog
module accu (
    input clk,
    input rst_n,
    input [7:0] data_in,
    input valid_in,
    output reg valid_out,
    output reg [9:0] data_out
);

reg [7:0] input_reg [3:0];
reg [3:0] count;

always @(posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        valid_out <= 0;
        data_out <= 10'd0;
        count <= 4'd0;
        input_reg <= 8'd0;
    end else begin
        if (valid_in && count < 4) begin
            input_reg[count] <= data_in;
            count <= count + 1;
        end else if (count == 4) begin
            data_out <= input_reg[0] + input_reg[1] + input_reg[2] + input_reg[3];
            valid_out <= 1;
            count <= 0;
            input_reg <= 8'd0;
        end
    end
end

endmodule
```