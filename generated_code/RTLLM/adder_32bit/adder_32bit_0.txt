module CLA_16bit (
  input [15:0] A,
  input [15:0] B,
  output [15:0] S,
  output C4
);

  wire [3:0] G, P, C;

  assign G = A & B;
  assign P = A ^ B;
  assign C = {4{1'b0}};

  assign S = P ^ C;
  assign C4 = G[0] | (P[0] & G[1]) | (P[0] & P[1] & G[2]) | (P[0] & P[1] & P[2] & G[3]);

endmodule

module adder_32bit (
  input [31:0] A,
  input [31:0] B,
  output [31:0] S,
  output C32
);

  wire [15:0] S0, C4_0, S1, C4_1, S2, C4_2, S3, C4_3;

  CLA_16bit CLA0 (
    .A(A[15:0]),
    .B(B[15:0]),
    .S(S0),
    .C4(C4_0)
  );

  CLA_16bit CLA1 (
    .A(A[31:16]),
    .B(B[31:16]),
    .S(S1),
    .C4(C4_1)
  );

  CLA_16bit CLA2 (
    .A({C4_0, S0}),
    .B({C4_1, S1}),
    .S(S2),
    .C4(C4_2)
  );

  CLA_16bit CLA3 (
    .A({C4_2, S2}),
    .B({C4_3, S3}),
    .S(S3),
    .C4(C4_3)
  );

  assign S = {S3, S2, S1, S0};
  assign C32 = C4_3;

endmodule