module cl_16bit (
    input [15:0] A,
    input [15:0] B,
    output [15:0] S,
    output P,
    output G
);

assign P = A & B;
assign G = A | B;

assign S = A ^ B ^ Cin;

endmodule

module cl_32bit (
    input [31:0] A,
    input [31:0] B,
    output [31:0] S,
    output C32
);

wire [15:0] C0, C1, C2, C3;
wire [15:0] S0, S1, S2, S3;
wire P0, G0, P1, G1, P2, G2, P3, G3;

cl_16bit c0(.A(A[15:0]), .B(B[15:0]), .S(S0), .P(P0), .G(G0));
cl_16bit c1(.A(A[31:16]), .B(B[31:16]), .S(S1), .P(P1), .G(G1));
cl_16bit c2(.A(S0), .B(S1), .S(S2), .P(P2), .G(G2));
cl_16bit c3(.A(A[31:16]), .B(B[31:16]), .Cin(C2[15]), .S(S3), .P(P3), .G(G3));

assign S[15:0] = S3;
assign S[31:16] = S2;

assign C32 = G0 | (P0 & G1) | (P0 & P1 & G2) | (P0 & P1 & P2 & G3);

endmodule

module adder_32bit (
    input [31:0] A,
    input [31:0] B,
    output [31:0] S,
    output C32
);

cl_32bit adder(.A(A), .B(B), .S(S), .C32(C32));

endmodule