```verilog
module RAM (
    input clk,
    input rst_n,
    input write_en,
    input [DEPTH-1:0] write_addr,
    input [WIDTH-1:0] write_data,
    input read_en,
    input [DEPTH-1:0] read_addr,
    output reg [WIDTH-1:0] read_data
);

parameter WIDTH = 6;
parameter DEPTH = 8;
reg [DEPTH-1:0] RAM [2**WIDTH-1:0]; // Dual-port RAM

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        // Initialize memory to all zeros
        foreach (RAM[i])
            RAM[i] <= 6'b000000;
    end else begin
        if (write_en) begin
            RAM[write_addr] <= write_data;
        end
    end
end

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        // Initialize the read_data register to 0
        read_data <= 6'b000000;
    end else begin
        if (read_en) begin
            read_data <= RAM[read_addr];
        end
    end
end

endmodule
```
This is the complete design code for a dual-port RAM with a depth of 8 and a bit width of 6 bits. The code includes two separate always blocks for read and write operations, utilizing the clock signal for synchronous operation and the reset signal for initialization.