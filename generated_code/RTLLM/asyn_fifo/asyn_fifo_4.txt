Sure, here is the complete verilog code for the implementation of the asynchronous FIFO with the given specifications:

```verilog
module dual_port_RAM (
    input wclk,
    input wenc,
    input [$clog2(DEPTH)-1:0] waddr,
    input [WIDTH-1:0] wdata,
    input rclk,
    input renc,
    input [$clog2(DEPTH)-1:0] raddr,
    output reg [WIDTH-1:0] rdata
);

reg [WIDTH-1:0] RAM_MEM [DEPTH-1:0];

always @(posedge wclk) begin
    if(wenc) begin
        RAM_MEM[waddr] <= wdata;
    end
end

always @(posedge rclk) begin
    if(renc) begin
        rdata <= RAM_MEM[raddr];
    end
end

endmodule

module asyn_fifo (
    input wclk,
    input rclk,
    input wrstn,
    input rrstn,
    input winc,
    input rinc,
    input [WIDTH-1:0] wdata,
    output reg wfull,
    output reg rempty,
    output reg [WIDTH-1:0] rdata
);

parameter WIDTH = 8;
parameter DEPTH = 16;

reg [WIDTH-1:0] wptr, rptr;
reg [WIDTH-1:0] wptr_buff, rptr_buff;
reg [WIDTH-1:0] waddr_bin, raddr_bin;
reg [WIDTH-1:0] waddr_gray, raddr_gray;

dual_port_RAM ram_inst (
    .wclk(wclk),
    .wenc(winc),
    .waddr(waddr_gray),
    .wdata(wdata),
    .rclk(rclk),
    .renc(rinc),
    .raddr(raddr_gray),
    .rdata(rdata)
);

always @(posedge wclk or negedge wrstn) begin
    if(~wrstn) begin
        wptr <= 0;
    end else if(winc) begin
        wptr <= wptr + 1;
    end
end

always @(posedge rclk or negedge rrstn) begin
    if(~rrstn) begin
        rptr <= 0;
    end else if(rinc) begin
        rptr <= rptr + 1;
    end
end

assign waddr_bin = wptr;
assign raddr_bin = rptr;
assign waddr_gray = wptr ^ (wptr >> 1);
assign raddr_gray = rptr ^ (rptr >> 1);

always @(posedge wclk or negedge wrstn) begin
    if(~wrstn) begin
        wptr_buff <= 0;
    end else begin
        wptr_buff <= wptr;
    end
end

always @(posedge rclk or negedge rrstn) begin
    if(~rrstn) begin
        rptr_buff <= 0;
    end else begin
        rptr_buff <= rptr;
    end
end

always @(*) begin
    if(wptr == ~{rptr[WIDTH-1], rptr[WIDTH-2:0]}) begin
        wfull = 1;
    else
        wfull = 0;
    end
    if(wptr == rptr) begin
        rempty = 1;
    else
        rempty = 0;
    end
end

endmodule
```

This verilog code implements an asynchronous FIFO with configurable width and depth using a dual-port RAM module and additional logic for managing read and write pointers. The FIFO determines full and empty conditions based on the Gray code converted read and write pointers.