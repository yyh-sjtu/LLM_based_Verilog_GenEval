```verilog
module traffic_light (
    input rst_n,
    input clk,
    input pass_request,
    output reg [7:0] clock,
    output reg red,
    output reg yellow,
    output reg green
);

parameter idle = 2'b00;
parameter s1_red = 2'b01;
parameter s2_yellow = 2'b10;
parameter s3_green = 2'b11;

reg [7:0] cnt;
reg [1:0] state;
reg p_red, p_yellow, p_green;

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        cnt <= 10;
        state <= idle;
        p_red <= 0;
        p_yellow <= 0;
        p_green <= 0;
    end else begin
        case(state)
            idle: begin
                state <= s1_red;
            end
            s1_red: begin
                if (cnt == 0)
                    state <= s3_green;
                else
                    state <= s1_red;
            end
            s2_yellow: begin
                if (cnt == 0)
                    state <= s1_red;
                else
                    state <= s2_yellow;
            end
            s3_green: begin
                if (cnt == 0)
                    state <= s2_yellow;
                else
                    state <= s3_green;
            end
        endcase
    end
end

always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        cnt <= 10;
    else begin
        if (pass_request && p_green)
            cnt <= 10;
        else if (!green && p_green)
            cnt <= 60;
        else if (!yellow && p_yellow)
            cnt <= 5;
        else if (!red && p_red)
            cnt <= 10;
        else
            cnt <= cnt - 1;
    end
end

assign clock = cnt;

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        red <= 0;
        yellow <= 0;
        green <= 0;
    end else begin
        case(state)
            s1_red: begin
                red <= 1;
                yellow <= 0;
                green <= 0;
            end
            s2_yellow: begin
                red <= 0;
                yellow <= 1;
                green <= 0;
            end
            s3_green: begin
                red <= 0;
                yellow <= 0;
                green <= 1;
            end
            default: begin
                red <= 0;
                yellow <= 0;
                green <= 0;
            end
        endcase
    end
end

endmodule
```