// Verilog code for an unsigned 16-bit multiplier using shift and accumulate operations

module multi_16bit (
    input clk,     // Clock signal
    input rst_n,   // Active-low reset signal
    input start,   // Enable signal to initiate multiplication
    input [15:0] ain, // Multiplicand input
    input [15:0] bin, // Multiplier input
    output reg [31:0] yout, // Product output
    output reg done // Completion flag
);

reg [4:0] i; // Shift count register
reg [15:0] areg, breg; // Multiplicand and multiplier registers
reg [31:0] yout_r; // Product register
reg done_r; // Completion flag register

always @ (posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        i <= 0; // Reset shift count register
        done_r <= 0; // Reset completion flag
        areg <= 0; // Reset multiplicand register
        breg <= 0; // Reset multiplier register
        yout_r <= 0; // Reset product register
    end else begin
        if (start && (i < 16)) begin
            i <= i + 1; // Increment shift count register
        end else if (!start) begin
            i <= 0; // Reset shift count register
        end

        done_r <= (i == 16) ? 1 : (i == 17) ? 0 : done_r; // Update completion flag
    end
end

always @ (posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        yout <= 0; // Reset product output
    end else begin
        if (i == 0) begin
            areg <= ain; // Store multiplicand in register
            breg <= bin; // Store multiplier in register
        end else if ((i > 0) && (i < 17)) begin
            if (areg[i-1] == 1) begin
                yout_r <= yout_r + ({breg, 16'b0} << (i-1)); // Shift and accumulate operation
            end
        end

        yout <= yout_r; // Assign product output
    end
end

assign done = done_r; // Assign completion flag

endmodule