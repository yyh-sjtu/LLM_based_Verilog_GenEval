// Module definition
module adder_pipe_64bit (
    input clk,
    input rst_n,
    input i_en,
    input [63:0] adda,
    input [63:0] addb,
    output reg [64:0] result,
    output reg o_en
);

// Internal signals declaration
reg [63:0] sum[3:0];
reg [4:0] carry[3:0];

// Pipeline stages
always @(posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        for (int i = 0; i < 4; i = i + 1) begin
            carry[i] <= 0;
            sum[i] <= 0;
        end
        o_en <= 0;
    end else begin
        carry[0] <= 0;
        sum[0] <= i_en ? (adda[0] + addb[0]) : 0;
        
        carry[1] <= adda[0] + addb[0] >= 64'd2;
        sum[1] <= i_en ? (adda[1] + addb[1] + carry[0]) : 0;
        
        carry[2] <= adda[1] + addb[1] + carry[0] >= 64'd2;
        sum[2] <= i_en ? (adda[2] + addb[2] + carry[1]) : 0;
        
        carry[3] <= adda[2] + addb[2] + carry[1] >= 64'd2;
        sum[3] <= i_en ? (adda[3] + addb[3] + carry[2]) : 0;
        
        result <= {carry[3], sum[3], sum[2], sum[1], sum[0]};
        o_en <= i_en;
    end
end

endmodule
