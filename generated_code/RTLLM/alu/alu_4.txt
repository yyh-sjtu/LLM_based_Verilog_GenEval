```verilog
module alu (
    input [31:0] a, b,
    input [5:0] aluc,
    output reg [31:0] r,
    output reg zero, carry, negative, overflow, flag
);

// Define the operation parameters
parameter ADD = 6'b100000;
parameter ADDU = 6'b100001;
parameter SUB = 6'b100010;
parameter SUBU = 6'b100011;
parameter AND = 6'b100100;
parameter OR = 6'b100101;
parameter XOR = 6'b100110;
parameter NOR = 6'b100111;
parameter SLT = 6'b101010;
parameter SLTU = 6'b101011;
parameter SLL = 6'b000000;
parameter SRL = 6'b000010;
parameter SRA = 6'b000011;
parameter SLLV = 6'b000100;
parameter SRLV = 6'b000110;
parameter SRAV = 6'b000111;
parameter LUI = 6'b001111;

reg [31:0] res;

always @* begin
    // Default outputs
    zero = 0;
    carry = 0;
    negative = 0;
    overflow = 0;
    flag = 'z;

    // Perform operation based on the control signal (aluc)
    case (aluc)
        ADD: res = a + b;
        ADDU: res = a + b;
        SUB: res = a - b;
        SUBU: res = a - b;
        AND: res = a & b;
        OR: res = a | b;
        XOR: res = a ^ b;
        NOR: res = ~(a | b);
        SLT: res = (a < b) ? 32'h1 : 32'h0;
        SLTU: res = (a < b) ? 32'h1 : 32'h0;
        SLL: res = a << b[4:0];
        SRL: res = a >> b[4:0];
        SRA: res = $signed(a) >>> b[4:0];
        SLLV: res = a << b;
        SRLV: res = a >> b;
        SRAV: res = $signed(a) >>> b;
        LUI: res = {{16{a[31]}}, a[15:0]};
        default: res = 32'bz;
    endcase

    // Set outputs based on the result
    if (res == 32'h0) zero = 1;
    if (res < 0) negative = 1;
    if (a[31] && b[31] && !res[31]) overflow = 1;
    // Set flag output for SLT and SLTU
    if (aluc == SLT || aluc == SLTU) flag = res[31];

    r = res[31:0];
end

endmodule
```
This code implements an ALU for a 32-bit MIPS-ISA CPU with the specified operations and control signals. It performs the operations based on the control signal (aluc) and sets the appropriate outputs (zero, carry, negative, overflow, flag) accordingly.