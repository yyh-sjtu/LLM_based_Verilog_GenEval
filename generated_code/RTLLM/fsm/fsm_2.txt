```verilog
module fsm (
    input wire IN,
    input wire CLK,
    input wire RST,
    output reg MATCH
);

    // Define states
    typedef enum logic [2:0] {
        S0, // Initial state
        S1, // State after receiving '1'
        S2, // State after '1, 0'
        S3, // State after '1, 0, 0'
        S4, // State after '1, 0, 0, 1'
        S5  // State after '1, 0, 0, 1, 1'
    } states;

    // Initialize state register
    reg [2:0] state, next_state;

    // Initialize output
    reg next_MATCH;

    // State transition and output logic
    always @ (posedge CLK or posedge RST) begin
        if (RST) begin
            state <= S0;
            MATCH <= 0;
        end
        else begin
            state <= next_state;
            MATCH <= next_MATCH;
        end
    end

    // Next state logic
    always @* begin
        next_state = state;
        next_MATCH = 0;

        case (state)
            S0: begin
                if (IN) next_state = S1;
            end
            S1: begin
                if (!IN) next_state = S0;
                else if (IN) next_state = S2;
            end
            S2: begin
                if (!IN) next_state = S0;
                else if (IN) next_state = S3;
            end
            S3: begin
                if (!IN) next_state = S0;
                else if (IN) next_state = S4;
            end
            S4: begin
                if (!IN) next_state = S0;
                else if (IN) begin
                    next_state = S5;
                    next_MATCH = 1;
                end
            end
            S5: begin
                if (!IN) next_state = S0;
            end
        endcase
    end

endmodule
```