```verilog
module radix2_div (
    input clk,
    input rst,
    input sign,
    input [7:0] dividend,
    input [7:0] divisor,
    input opn_valid,
    output reg res_valid,
    output reg [15:0] result
);

reg [15:0] SR;
reg [7:0] NEG_DIVISOR;
reg [3:0] cnt;
reg start_cnt;

always @(posedge clk or posedge rst) begin
    if (rst) begin
        res_valid <= 0;
        SR <= 16'h0000;
        start_cnt <= 0;
        cnt <= 4'h1;
    end else begin
        if (opn_valid && !res_valid) begin
            SR <= {1'b0, dividend} << 1;
            NEG_DIVISOR <= -divisor;
            start_cnt <= 1;
        end
        
        if (start_cnt) begin
            if (cnt == 4'h8) begin
                start_cnt <= 0;
                cnt <= 4'h1;
                SR <= {SR[7:0] + 8'h00, SR[15:8], 8'h00}; // update SR with remainder and quotient
                res_valid <= 1;
            end else begin
                cnt <= cnt + 1;
                if (sign) begin // signed division
                    if (SR[15] == 1) begin
                        SR <= SR + {1'b0, NEG_DIVISOR}; // subtraction with 2's complement
                    end else begin
                        SR <= SR + {1'b0, divisor}; 
                    end
                end else begin // unsigned division
                    if (SR[15:8] >= divisor) begin
                        SR <= SR + {1'b0, -divisor};
                    end
                end
                SR <= {SR[7:0], SR[15:8]}; // shift left and update carry-out
            end
        end
    end
end

assign result = SR;

endmodule
```