```verilog
module serial2parallel(
	input clk,
	input rst_n,
	input din_serial,
	input din_valid,
	output reg [7:0] dout_parallel,
	output reg dout_valid
);

	reg [3:0] cnt; // 4-bit counter to keep track of the number of serial input data bits received

	always @(posedge clk or negedge rst_n) begin
		if (~rst_n) begin
			cnt <= 4'b0000; // Reset the counter
			dout_parallel <= 8'b00000000; // Reset the parallel output data
			dout_valid <= 1'b0; // Reset the validity signal
		end else begin
			if (din_valid) begin
				if (cnt < 4'b1000) begin // If not all 8 bits have been received yet
					dout_parallel[cnt] <= din_serial; // Assign the input data to the respective bit of dout_parallel
					cnt <= cnt + 1; // Increment the counter
				end
				if (cnt == 4'b1000) begin // If all 8 bits have been received
					dout_valid <= 1'b1; // Set the validity signal
				end
			end
		end
	end

endmodule
```