```verilog
module serial2parallel (
    input clk,
    input rst_n,
    input din_serial,
    input din_valid,
    output reg [7:0] dout_parallel,
    output reg dout_valid
);

reg [3:0] cnt;

always @(posedge clk or negedge rst_n) begin
    if (~rst_n) begin
        cnt <= 4'b0000;
        dout_parallel <= 8'b00000000;
        dout_valid <= 0;
    end else begin
        if (din_valid) begin
            if (cnt < 4'b1000) begin
                cnt <= cnt + 1;
                dout_parallel <= {din_serial, dout_parallel[7:1]};
            end else begin
                cnt <= 4'b0000;
                dout_valid <= 1;
            end
        end
    end
end

endmodule
```
In this implementation, the serial2parallel module receives a serial input data bit (din_serial) along with a control signal (din_valid). It utilizes a 4-bit counter to keep track of the number of input data bits received. When all 8 bits are received, the parallel output data (dout_parallel) is updated with the input data bits in the correct order, and the validity signal (dout_valid) is set to 1. The module operates on the rising edge of the clock signal (clk) and uses a synchronous design with an active low reset signal (rst_n).