Certainly! Below is a simple Verilog implementation of the counter that counts from 1 to 12. It will reset to 1 after reaching 12. The design uses a synchronous reset, which means the counter will reset when the reset signal is asserted.

```verilog
module counter(
    input clk,
    input reset,
    output reg [3:0] q
);
    
    // Initialize the counter
    initial begin
        q = 4'b0001; // Start counting from 1
    end

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            q <= 4'b0001; // Reset to 1
        end else begin
            if (q == 4'b1100) begin // If q is 12 (1100 in binary)
                q <= 4'b0001; // Reset to 1
            end else begin
                q <= q + 1; // Increment the counter
            end
        end
    end
    
endmodule
```

### Explanation of the Code:
1. **Inputs and Outputs**:
   - `clk`: Clock input to drive the counter.
   - `reset`: Active-high reset input; when asserted, it resets the counter.
   - `q`: 4-bit output representing the current count (from 1 to 12).

2. **Initial Block**:
   - The initial block is used to set the counter to its starting value of 1.

3. **Always Block**:
   - The always block triggers on the positive edge of the clock or when `reset` is asserted.
   - If `reset` is high, the counter is set back to 1.
   - If `reset` is not high and if `q` equals 12 (4'b1100), it resets back to 1. Otherwise, it increments `q`.

### Simulation and Use
You can simulate this module in any Verilog simulator. Connect it to a clock source, and observe the output `q` to ensure it counts correctly from 1 to 12 and resets appropriately.