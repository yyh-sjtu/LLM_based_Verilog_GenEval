

// Define state encoding
localparam [1:0] IDLE = 2'b00;
localparam [1:0] SA = 2'b01;
localparam [1:0] SB = 2'b10;
localparam [1:0] SAB = 2'b11;

// Declare outputs
reg z;

// Sequential logic for state machine
always @(posedge clk or posedge reset) begin
    if (reset) begin
        cur_state <= IDLE;
    end else begin
        cur_state <= next_state;
    end
end

// Combinational logic for next state and output generation
always @(*) begin
    case (cur_state)
        IDLE: begin
            if (a & b) begin
                next_state = SAB;
            end else if (a) begin
                next_state = SA;
            end else if (b) begin
                next_state = SB;
            end else begin
                next_state = IDLE;
            end
        end
        
        SA: begin
            if (b) begin
                next_state = SAB;
            end else begin
                next_state = SA;
            end
        end
        
        SB: begin
            if (a) begin
                next_state = SAB;
            end else begin
                next_state = SB;
            end
        end
        
        SAB: begin
            next_state = SAB;
        end
    endcase
end

// Output assignment
assign z = (cur_state == SAB);

endmodule