Certainly! Below is a Verilog implementation of the `abro` finite state machine (FSM) that meets the specified requirements. The FSM transitions through states based on the inputs `a` and `b`, and outputs `z` when both signals are received at least once, regardless of their order.

```verilog
module abro( 
    input clk,
    input reset,
    input a,
    input b,
    output reg z 
);
    parameter IDLE = 2'b00,
              SA   = 2'b01,
              SB   = 2'b10,
              SAB  = 2'b11;
              
    reg [1:0] cur_state, next_state;
    
    // Synchronous state transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            cur_state <= IDLE;
            z <= 0;
        end else begin
            cur_state <= next_state;
        end
    end

    // State transition logic
    always @(*) begin
        case (cur_state)
            IDLE: begin
                if (a) 
                    next_state = SA;
                else if (b)
                    next_state = SB;
                else 
                    next_state = IDLE;
                z = 0; // Output is 0
            end

            SA: begin
                if (b) 
                    next_state = SAB;
                else
                    next_state = SA; // stay in SA if a is still high
                z = 0; // Output is still 0
            end

            SB: begin
                if (a) 
                    next_state = SAB;
                else
                    next_state = SB; // stay in SB if b is still high
                z = 0; // Output is still 0
            end

            SAB: begin
                next_state = SAB; // Stay in SAB
                z = 1; // Output is 1 when both a and b have been received
            end
            
            default: begin
                next_state = IDLE;
                z = 0; // Default error handling
            end
        endcase
    end
endmodule
```

### Explanation
1. **States**:
   - **IDLE**: The initial state, waiting for either signal `a` or `b`.
   - **SA**: State representing that `a` has been activated.
   - **SB**: State representing that `b` has been activated.
   - **SAB**: Final state when both `a` and `b` have been received.

2. **State Transitions**:
    - From **IDLE** to **SA** when `a` is high.
    - From **IDLE** to **SB** when `b` is high.
    - From **SA** to **SAB** if `b` becomes high.
    - From **SB** to **SAB** if `a` becomes high.
    - Stay in **SAB** when both are received.

3. **Output Logic**:
   - The output `z` is set to 1 only when both signals have been received (i.e., in the state **SAB**).
   - At all other states, `z` is 0.

4. **Reset Logic**:
    - On reset, the FSM goes to the **IDLE** state, and the output `z` is also reset to 0.

This module should function as an ABRO FSM, activating the output when both inputs have been received.