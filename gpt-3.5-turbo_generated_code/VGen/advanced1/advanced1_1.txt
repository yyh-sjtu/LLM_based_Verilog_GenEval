Certainly! Below is a Verilog implementation of a signed adder that adds two 8-bit 2's complement numbers and captures a signed overflow. The signed overflow occurs when the sign of the result is incorrect due to the addition of two numbers with the same sign.

```verilog
module signed_adder(
    input [7:0] a,         // First 8-bit signed number
    input [7:0] b,         // Second 8-bit signed number
    output [7:0] s,        // Sum of a and b
    output overflow        // Overflow flag
);

    wire [8:0] sum;       // 9-bit sum to capture carry out
    assign sum = {1'b0, a} + {1'b0, b};  // Zero-extend a and b to 9 bits for addition

    assign s = sum[7:0]; // Assign the lower 8 bits as the result

    // Check for overflow:
    assign overflow = (a[7] == b[7]) && (s[7] != a[7]);

endmodule
```

### Explanation:

- **Inputs and Outputs**:
    - `a`, `b`: The two 8-bit signed numbers in 2's complement format.
    - `s`: The output sum of `a` and `b`.
    - `overflow`: A flag indicating if an overflow has occurred.

- **Summation**:
    - To prevent overflow in the addition, we zero-extend the 8-bit inputs to 9 bits before adding them. This allows us to observe any carry-out that may occur from the most significant bit.
  
- **Overflow Detection**:
    - The logic used to determine overflow checks:
        - If both inputs, `a` and `b`, have the same sign (both are positive or both are negative), we then check if the sign of the result `s` differs from `a`.
        - If they do differ, an overflow has occurred.

### Points of Interest:
- This code correctly handles 2's complement numbers and efficiently checks for overflow, making it suitable for digital design applications that require signed arithmetic operations.