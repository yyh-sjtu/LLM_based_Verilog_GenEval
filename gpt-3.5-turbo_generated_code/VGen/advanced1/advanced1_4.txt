Certainly! Below is a Verilog implementation of a signed adder that adds two 8-bit 2's complement numbers and captures a signed overflow:

```verilog
module signed_adder(
    input  [7:0] a,
    input  [7:0] b,
    output [7:0] s,
    output overflow
);
    // Internal wire for the sum
    wire [8:0] sum; // 9 bits to check for overflow
    assign sum = {1'b0, a} + {1'b0, b}; // Extend a and b to 9 bits for addition

    // Assign sum to output, discard the carry-out
    assign s = sum[7:0];

    // Overflow detection logic
    // Overflow occurs when:
    // 1. Both inputs are positive and the result is negative.
    // 2. Both inputs are negative and the result is positive.
    assign overflow = (a[7] == b[7]) && (a[7] != sum[7]);

endmodule
```

### Explanation:
1. **Inputs and Outputs**:
   - `input [7:0] a`: First signed 8-bit number.
   - `input [7:0] b`: Second signed 8-bit number.
   - `output [7:0] s`: The resulting signed 8-bit sum.
   - `output overflow`: A signal indicating if an overflow has occurred.

2. **Sum Calculation**:
   - We use a 9-bit wire (`sum`) to store the result of adding `a` and `b`. This extra bit is for detecting overflow.
   - `{1'b0, a}` and `{1'b0, b}` are used to zero-extend the 8-bit inputs to 9 bits, allowing for the detection of overflow.

3. **Overflow Detection**:
   - The condition for overflow checks if:
     - Both `a` and `b` are positive (`a[7] == b[7] == 0`), but the resulting sign bit `sum[7]` is negative.
     - Both `a` and `b` are negative (`a[7] == b[7] == 1`), but the resulting sign bit `sum[7]` is positive.
   - If either of these conditions holds true, the `overflow` output is set to `1`.

This module accurately captures the signed addition of two 8-bit numbers and informs users if an overflow occurred. Feel free to ask if you have any questions or need further modifications!