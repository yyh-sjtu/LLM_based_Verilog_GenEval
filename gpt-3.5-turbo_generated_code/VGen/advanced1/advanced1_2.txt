Certainly! Below is a simple implementation of a signed 8-bit adder in Verilog that adds two 2's complement numbers and also captures a signed overflow. 

In 2's complement arithmetic, overflow occurs when:

- Adding two positive numbers results in a negative sum.
- Adding two negative numbers results in a positive sum.

To detect overflow, we can use the following logic: 
- Overflow occurs if the sign of the two operands is the same and the sign of the result is different.

Here's the Verilog code for the `signed_adder` module:

```verilog
module signed_adder(
    input [7:0] a,       // First signed 8-bit number
    input [7:0] b,       // Second signed 8-bit number
    output reg [7:0] s,  // Sum
    output reg overflow   // Overflow flag
);
    
    // Internal wire for the sum and carry out
    wire [8:0] sum; // 9 bits to capture carry out
    assign sum = {1'b0, a} + {1'b0, b}; // Extend to 9 bits for addition

    // Assign the sum to the output
    always @(*) begin
        s = sum[7:0]; // Capture the lower 8 bits for the result
        // Check for overflow
        overflow = (a[7] == b[7]) && (s[7] != a[7]);
    end

endmodule
```

### Explanation:
- **Inputs**: 
  - `a` and `b` are the 8-bit signed inputs.
  
- **Output**:
  - `s` is the 8-bit sum.
  - `overflow` is a signal to indicate if signed overflow occurred.
  
- **Sum Calculation**:
  - The inputs `a` and `b` are extended to 9 bits by adding a leading zero (`{1'b0, a}` and `{1'b0, b}`), allowing us to capture any overflow in the sum.

- **Overflow Logic**:
  - The condition `overflow = (a[7] == b[7]) && (s[7] != a[7]);` checks if `a` and `b` have the same sign (i.e., both are positive or both are negative) and if the sign of the result `s` is different from the sign of `a`. If both conditions are true, an overflow has occurred.

This implementation allows you to correctly handle the addition of signed 8-bit numbers and check for overflow conditions.