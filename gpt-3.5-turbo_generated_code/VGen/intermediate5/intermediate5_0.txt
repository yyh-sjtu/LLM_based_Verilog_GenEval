Certainly! Below is an implementation of the specified Verilog module that performs a left rotation on an 8-bit input `data` based on a 3-bit `amount`. The module will shift the input left by the specified `amount` and wrap the bits around. It also incorporates a clock (`clk`), a reset signal (`reset`), and a load signal (`load`) to control the operation.

Here's the Verilog code for the module:

```verilog
module left_rotate(
    input clk,
    input reset,
    input [2:0] amount,
    input [7:0] data,
    input load,
    output reg [7:0] out
);

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset output to zero
            out <= 8'b0;
        end else if (load) begin
            // Load data into output
            out <= data;
        end else begin
            // Perform left rotate operation
            out <= (out << amount) | (out >> (8 - amount));
        end
    end

endmodule
```

### Explanation:

1. **Module Declaration**: The module is named `left_rotate`, and it has the specified input and output ports.

2. **Reset Logic**: When the `reset` signal is high, the output `out` is set to zero.

3. **Load Logic**: If the `load` signal is high, the output `out` is loaded with the `data` input.

4. **Left Rotate Logic**: When neither reset nor load is active, the current value of `out` is rotated to the left. The left shift operator `<<` shifts the bits to the left, and the right shift operator `>>` shifts the bits to the right. The operation combines both to achieve the rotation effect:
   - `out << amount`: Shifts the bits left by the specified amount.
   - `out >> (8 - amount)`: Shifts the bits right by the number of bits that wrap around.
   - The two results are combined using the bitwise OR operator `|`.

### Notes:
- The rotation of bits is done using a parameterized shift amount due to the 3-bit input `amount`, allowing for rotations of 0 to 7 bits.
- This design assumes that operations happen on a positive clock edge and reacts appropriately to the load and reset signals.
- Ensure to synthesize and simulate this design in an appropriate environment to verify its functionality.