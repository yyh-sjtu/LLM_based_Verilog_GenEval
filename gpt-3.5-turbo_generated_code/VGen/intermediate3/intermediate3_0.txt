// defining the taps
assign feedback_value = r_reg[4] ^ r_reg[2];

// flip-flop behavior
always @(posedge clk or posedge reset) begin
   if (reset)
       r_reg <= 5'b1; // initializing with seed value 00001
   else
       r_reg <= r_next; // update with next value
end

// feedback logic
assign r_next[4] = feedback_value;
assign r_next[3] = r_reg[4];
assign r_next[2] = r_reg[3];
assign r_next[1] = r_reg[2];
assign r_next[0] = r_reg[1];

// assigning output
assign q = r_reg;

endmodule