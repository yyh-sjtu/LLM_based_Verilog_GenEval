Here's a complete implementation of the permutation block module (`P_box`) in Verilog, based on the provided `In32table`. This module takes a 32-bit input and produces a permuted 32-bit output following the specified order in the `In32table`.

```verilog
module P_box ( 
    input wire [31:0] In32, 
    output reg [31:0] Out32 
);
    localparam len_table = 32;
    reg [4:0] In32table [0:len_table-1]; // Change to [4:0] for bit-size

    // Initialization of the permutation table
    initial begin
        In32table[0]  = 15;
        In32table[1]  = 6;
        In32table[2]  = 20;
        In32table[3]  = 10;
        In32table[4]  = 11;
        In32table[5]  = 22;
        In32table[6]  = 5;
        In32table[7]  = 9;
        In32table[8]  = 1;
        In32table[9]  = 7;
        In32table[10] = 8;
        In32table[11] = 4;
        In32table[12] = 12;
        In32table[13] = 13;
        In32table[14] = 14;
        In32table[15] = 17;
        In32table[16] = 16;
        In32table[17] = 25;
        In32table[18] = 19;
        In32table[19] = 23;
        In32table[20] = 18;
        In32table[21] = 26;
        In32table[22] = 28;
        In32table[23] = 27;
        In32table[24] = 29;
        In32table[25] = 31;
        In32table[26] = 30;
        In32table[27] = 0;
        In32table[28] = 2;
        In32table[29] = 3;
        In32table[30] = 21;       
        In32table[31] = 24;
    end

    // Perform the permutation on the input
    always @(*) begin
        Out32 = 32'b0; // Initialize the output
        for (integer i = 0; i < len_table; i = i + 1) begin
            Out32[i] = In32[In32table[i]]; // Assign according to the permutation
        end
    end
endmodule
```

### Explanation:

1. **Input and Output**: The module has a 32-bit input (`In32`) and generates a 32-bit output (`Out32`).

2. **Permutation Table**: The `In32table` array holds the permutation indices (0-31). The size has been modified to `reg [4:0]` to match the 32 indices.

3. **Initialization**: During initialization, the permutation table is filled with predefined indices.

4. **Always Block**: The `always @(*)` block triggers whenever there is a change in `In32`. It resets `Out32` to zero and then iterates through each index of the `In32table`, mapping the input bits based on the permutation defined.

5. **Output Calculation**: Within the loop, the output `Out32[i]` is assigned the corresponding bit from `In32` using the index from `In32table`.

This design effectively performs the permutation as specified and is ready for simulation or synthesis.